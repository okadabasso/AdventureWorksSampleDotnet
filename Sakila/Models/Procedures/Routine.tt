<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="$(SolutionDir)\Schema\bin\Debug\Schema.dll" #>
<#@ assembly name="$(SolutionDir)\Schema.MySql\bin\Debug\Schema.MySql.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="Schema" #>
<#@ import namespace="Schema.Infrastructure" #>
<#@ import namespace="Schema.MySql" #>
<#@ output extension=".generated.cs" #>
<#
    var contextName = "SampleDbContext";
    var connectionName = "sampledb";
    var modelNamespace = "Sakila.Models";
    var connectionString = "server= localhost;database=sakila;uid=sakilauser;pwd=sakilauser";

    var schemaManager = new MySqlSchemaManager(connectionString);
    var routines = schemaManager.GetRoutines();
#>
<#  foreach(var routine in routines.Where(x => x.RoutineType == "PROCEDURE")){ 
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using MySql.Data;
using MySql.Data.EntityFramework;
using MySql.Data.MySqlClient;

namespace <#= modelNamespace #>
{
    public partial class <#= routine.ObjectName #>
    {
        private readonly <#= contextName #> context;
        public <#= routine.ObjectName#>()
        {
            context = new <#= contextName #>();
        }
        public <#= routine.ObjectName#>(<#= contextName #> context)
        {
            this.context = context;
        }

        ///<summary>execute command <#= routine.SpecificName  #></summary>
        public int Execute(
<#      // create arguments
        var position = 0;
        foreach(var parameter in routine.Parameters){
            string modifier  = "";
            if(parameter.ParameterMode == "IN"){
                modifier = "";
            }
            else if(parameter.ParameterMode == "INOUT"){
                modifier = "ref ";
            }
            else if(parameter.ParameterMode == "OUT"){
                modifier = "out ";
            }
            if(position > 0){
#>, 
<#
            }
#>
            <#= modifier #><#= parameter.ObjectTypeName#> <#= NamingConvention.Camelize(parameter.ObjectName) #><#
            position++;
        }
#>

        )
        {
<#      // create parameters
        position = 0;
        foreach(var parameter in routine.Parameters){
            if(parameter.ParameterMode == "IN"){
#>
            var p<#= position #> = new MySqlParameter("@<#= parameter.ParameterName #>",  <#= NamingConvention.Camelize(parameter.ObjectName) #>);
<#
            }
            else if(parameter.ParameterMode == "INOUT"){
#>
            var p<#= position #> = new MySqlParameter("@<#= parameter.ParameterName #>",  <#= NamingConvention.Camelize(parameter.ObjectName) #>){ Direction = System.Data.ParameterDirection.InputOutput };
<#
            }
            else if(parameter.ParameterMode == "OUT"){
#>
            var p<#= position #> = new MySqlParameter() { ParameterName = "@<#= parameter.ParameterName #>", Direction = System.Data.ParameterDirection.Output };
<#
            }
            position++;
        }
        // call procedure
#>
            var command = new MySqlCommand(@"<#= routine.SpecificName #>");
            command.CommandType = System.Data.CommandType.StoredProcedure;
            command.Connection = context.Database.Connection as MySql.Data.MySqlClient.MySqlConnection;
<#
        position = 0;
        foreach(var parameter in routine.Parameters){
#>
            command.Parameters.Add(p<#= position#>);
<#
        }
#>

            var affected = command.ExecuteNonQuery();
<#      // get output paraemeter values
        position = 0;
        foreach(var parameter in routine.Parameters){
            if(parameter.ParameterMode == "INOUT" || parameter.ParameterMode == "OUT" ){
#>
            <#= NamingConvention.Camelize(parameter.ObjectName) #> = (<#= parameter.ObjectTypeName #>)p<#= position #>.Value;
<#
            }
            position++;
        }

#>
            return 0;
        }

    }
}
<#      SaveOutput(routine.ObjectName + ".generated.cs"); 
    } #>
<#+
private void SaveOutput(string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string outputFilePath = Path.Combine(templateDirectory, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);

  var visualStudio = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
  var project = visualStudio.Solution.FindProjectItem(this.Host.TemplateFile).ContainingProject as EnvDTE.Project;
  project.ProjectItems.AddFromFile(outputFilePath);
}
#>