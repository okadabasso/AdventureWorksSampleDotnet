<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="$(SolutionDir)\Schema\bin\Debug\Schema.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="Schema" #>
<#@ output extension=".generated.cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
namespace Sample.Entities
{
<#
    var schemaManager = new SchemaManager("data source=localhost\\SQLEXPRESS;initial catalog=AdventureWorks2016;integrated security=True;MultipleActiveResultSets=True;");
    var tables = schemaManager.GetTables();
#>
    public class SampleDbContext : DbContext{
        public SampleDbContext()
            : base("name=AdventureWorks")
        {
        }
<#  foreach(var table in tables){ 
        if( table.Columns.Any(x => x.DataType == "hierarchyid")){
            continue;
        }
#>
        public virtual DbSet<<#= table.ObjectName #>> <#= table.ObjectName #> { get; set; }
<#  } #>
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
        }
    }
}
<# SaveOutput("SampleDbContext.cs"); #>

<#  foreach(var table in tables){ 
        if( table.Columns.Any(x => x.DataType == "hierarchyid")){
            continue;
        }
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
namespace Sample.Entities
{
    [Table("<#= table.TableSchema #>.<#= table.TableName#>")]
    public partial class <#= table.ObjectName#>
    {
<#      foreach(var column in table.Columns){ #>
<#      if(table.PrimaryKeyColumns.Any(x => x == column.ColumnName)) {  #>
        [Key]
<#      } #>
<#      if(!table.PrimaryKeyColumns.Any() && column.OrdinalPosition == 1) {  #>
        [Key]
<#      } #>
        [Column("<#= column.ColumnName #>", Order = <#= column.OrdinalPosition #>, TypeName = "<#= column.DataType #>")]
<#      if(column.ObjectType == typeof(string) && column.CharacterMaximumLength > 0){ #>
        [StringLength(<#= column.Precision #>)]
<#      } #>
        public <#= column.ObjectTypeName #> <#= column.ObjectName #> { get; set; }
<#  } #>
        public <#= table.ObjectName#>()
        {
<#      foreach(var column in table.Columns){ #>
<#          if(column.DefaultValue == null){ #>
            <#= column.ObjectName #> = null;
<#          } else { #>
<#              if(column.DataType == "date" || column.DataType == "datetime" || column.DataType == "datetime2" || column.DataType == "smalldatetime"){ #>
            <#= column.ObjectName #> = DateTime.Parse(<#= column.DefaultValueLiteral #>);
<#              } else if(column.DataType == "time"){ #>
            <#= column.ObjectName #> = TimeSpan.Parse(<#= column.DefaultValueLiteral #>);
<#              } else if(column.DataType == "uniqueidentifier"){ #>
            <#= column.ObjectName #> = Guid.Parse(<#= column.DefaultValueLiteral #>);
<#              } else { #>
            <#= column.ObjectName #> = <#= column.DefaultValueLiteral #>;
<#              } #>
<#          } #>
<#      } #>
        }
    }
}
<# SaveOutput(table.ObjectName + ".generated.cs"); #>
<#  } #>
<#+
private void SaveOutput(string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string outputFilePath = Path.Combine(templateDirectory, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);

  var visualStudio = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
  var project = visualStudio.Solution.FindProjectItem(this.Host.TemplateFile).ContainingProject as EnvDTE.Project;
  project.ProjectItems.AddFromFile(outputFilePath);
}
#>