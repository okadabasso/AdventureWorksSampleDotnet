<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="$(SolutionDir)\Schema\bin\Debug\Schema.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="Schema" #>
<#@ import namespace="Schema.Infrastructure" #>
<#@ output extension=".generated.cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
namespace Sample.Entities
{
<#
    var schemaManager = new SchemaManager("data source=localhost\\SQLEXPRESS;initial catalog=AdventureWorks2016;integrated security=True;MultipleActiveResultSets=True;");
    var tables = schemaManager.GetTables();
#>
    public class SampleDbContext : DbContext{
        public SampleDbContext()
            : base("name=AdventureWorks")
        {
            Database.SetInitializer<SampleDbContext>(null);
            Database.Log = x => Console.Out.WriteLine(x);
        }
<#  foreach(var table in tables){ 
        // hierarchyid is not supported on .NET Framework 4.7
        if( table.PrimaryKeyColumns.Any(x => table.Columns.Any(y => y.ColumnName == x && y.DataType == "hierarchyid"))){
            continue;
        }
#>
        public virtual DbSet<<#= table.ObjectName #>> <#= table.ObjectName #> { get; set; }
<#  } #>
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {

<#  foreach(var table in tables){ 
        // hierarchyid is not supported on .NET Framework 4.7
        if( table.PrimaryKeyColumns.Any(x => table.Columns.Any(y => y.ColumnName == x && y.DataType == "hierarchyid"))){
            continue;
        }

        
        // このテーブルを参照する
        var dependentsForInit = tables.Where(x => x.ForeignKeys.Any(y => y.ReferencedTable.NameEquals(table)))
            .SelectMany(x => x.ForeignKeys.Where(r => r.ReferencedTable.NameEquals(table)))
            .GroupBy(x => new { x.BaseTable.TableSchema, x.BaseTable.ObjectName });

        foreach (var group in dependentsForInit)
        {
            var n = 0;
            foreach(var fkey in group)
            {
                if( fkey.BaseTable.PrimaryKeyColumns.Any(x => fkey.BaseTable.Columns.Any(y => y.ColumnName == x && y.DataType == "hierarchyid"))){
                     continue;
                }
#>            modelBuilder.Entity<<#= table.ObjectName #>>()
<#
                var variableName = NamingConvention.Pluralize(fkey.BaseTable.ObjectName) + $"{n:#}";
                if(fkey.DependentRole.Multiplicity == "*"){
#>
                .HasMany(e => e.<#= variableName #>)
<#
                    if(fkey.PrincipalRole.Required){ #>
                .WithRequired(e => e.<#= fkey.ReferencedTable.ObjectName + $"{n:#}" #>)<#
                    } else { #>
                .WithOptional(e => e.<#= fkey.ReferencedTable.ObjectName + $"{n:#}" #>)<#
                    } 
                    if(fkey.Columns.Count > 1 ){ #>

                .HasForeignKey(e => new { 
<#
                        var position = 0;
                        foreach(var column in fkey.Columns){
                            if(position > 0){
#>,<#
                            }
#>
                    e.<#= NamingConvention.Pascalize(column) #>
<#
                            position++;
                        }
#>                
                 })<#                  
                    } else { #>

                .HasForeignKey(e => e.<#= NamingConvention.Pascalize(fkey.Columns[0]) #>)<#
                    }
                }
                else{
#>
                .HasOptional(e => e.<#= fkey.BaseTable.ObjectName + $"{n:#}" #>)
<#
                    if(fkey.PrincipalRole.Required){ #>
                .WithRequired(e => e.<#= fkey.ReferencedTable.ObjectName + $"{n:#}" #>)<#
                    } else { #>
                .WithOptional(e => e.<#= fkey.ReferencedTable.ObjectName + $"{n:#}" #>)<#
                    } 
                } 
                if(fkey.ReferentialConstraint.DeleteRule == "NO ACTION"){ #>

                .WillCascadeOnDelete(false)<#
                }
#>;

<#
                
                n++;
            }
        }
        foreach(var column in table.Columns){
            if(column.IsString && !column.IsUnicode){
#>
            modelBuilder.Entity<<#= table.ObjectName #>>()
                .Property(e => e.<#= column.ObjectName #>)
                .IsUnicode(false);

<#
            }
            if(column.IsString && column.IsFixedLength){
#>
            modelBuilder.Entity<<#= table.ObjectName #>>()
                .Property(e => e.<#= column.ObjectName #>)
                .IsFixedLength();

<#
            }
            if(column.DataType == "decimal" || column.DataType == "number" || column.DataType == "money"){
#>
            modelBuilder.Entity<<#= table.ObjectName #>>()
                .Property(e => e.<#= column.ObjectName #>)
                .HasPrecision(<#= column.NumericPrecision #>, <#= column.NumericScale #>);

<#
            }
        }
    } #>
        }
    }
}
<# SaveOutput("SampleDbContext.cs"); #>

<#  foreach(var table in tables){ 
        // EntityFrameworkCore cannot map "hierarchyid"
        if( table.PrimaryKeyColumns.Any(x => table.Columns.Any(y => y.ColumnName == x && y.DataType == "hierarchyid"))){
            continue;
        }
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
namespace Sample.Entities
{
    [Table("<#= table.TableSchema #>.<#= table.TableName#>")]
    public partial class <#= table.ObjectName#>
    {
        public <#= table.ObjectName#>()
        {
<#      foreach(var column in table.Columns){ 
            // hierarchyid is not supported on .NET Framework 4.7
            if(column.DataType == "hierarchyid") {  continue;  } 
            if(column.DefaultValue == null){ #>
            <#= column.ObjectName #> = null;
<#          } else { 
                if(column.DataType == "date" || column.DataType == "datetime" || column.DataType == "datetime2" || column.DataType == "smalldatetime"){ #>
            <#= column.ObjectName #> = DateTime.Parse(<#= column.DefaultValueLiteral #>);
<#              } else if(column.DataType == "time"){ #>
            <#= column.ObjectName #> = TimeSpan.Parse(<#= column.DefaultValueLiteral #>);
<#              } else if(column.DataType == "uniqueidentifier"){ #>
            <#= column.ObjectName #> = Guid.Parse(<#= column.DefaultValueLiteral #>);
<#              } else { #>
            <#= column.ObjectName #> = <#= column.DefaultValueLiteral #>;
<#              } 
            } 
      } 
#>
<#  
        // このテーブルを参照する
        var dependentsForInit = tables.Where(x => x.ForeignKeys.Any(y => y.ReferencedTable.NameEquals(table)))
            .SelectMany(x => x.ForeignKeys.Where(r => r.ReferencedTable.NameEquals(table)))
            .GroupBy(x => new { x.BaseTable.TableSchema, x.BaseTable.TableName });

        foreach (var group in dependentsForInit)
        {
            var n = 0;
            foreach(var fkey in group)
            {
                var variableName = Schema.Infrastructure.Inflector.Currnet.Pluralize(fkey.BaseTable.ObjectName) + $"{n:#}";
                if( fkey.BaseTable.PrimaryKeyColumns.Any(x => fkey.BaseTable.Columns.Any(y => y.ColumnName == x && y.DataType == "hierarchyid"))){
                     continue;
                }
                if(fkey.DependentRole.Multiplicity == "*"){
#>
            <#= variableName  #> = new HashSet<<#= fkey.BaseTable.ObjectName #>>();
<#              }
                n++;
            }        
        }
#>

        }

<#      foreach(var column in table.Columns){
            // hierarchyid is not supported on .NET Framework 4.7
            if(column.DataType == "hierarchyid") {  
                continue;
            }#>
        ///<summary><#= column.Description ?? $"column:{column.ColumnName}" #></summary>
<# 
            if(table.PrimaryKeyColumns.Any(x => x == column.ColumnName)) {  #>
        [Key]
<#          }
            if(!table.PrimaryKeyColumns.Any() && column.OrdinalPosition == 1) {  #>
        [Key]
<#          }
            if(column.ObjectType.IsClass && column.IsNullable == "NO") {  #>
        [Required]
<#          } 
            if( table.PrimaryKeyColumns.Contains(column.ColumnName) || !table.ForeignKeys.Any(x => x.Columns.Contains(column.ColumnName))){  #>
        [Column("<#= column.ColumnName #>", Order = <#= column.OrdinalPosition - 1 #>, TypeName = "<#= column.DataType #>")]
<#          }  
            if(column.ObjectType == typeof(string) && column.CharacterMaximumLength > 0){ #>
        [StringLength(<#= column.Precision #>)]
<#          } 
            if(column.IsIdentity == "YES")  {  #>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
<#          } #>
        public <#= column.ObjectTypeName #> <#= column.ObjectName #> { get; set; }

<#      } 
  
        // このテーブルを参照する
        var dependents = tables.Where(x => x.ForeignKeys.Any(y => y.ReferencedTable.NameEquals(table)))
            .SelectMany(x => x.ForeignKeys.Where(r => r.ReferencedTable.NameEquals(table)))
            .GroupBy(x => new { x.BaseTable.TableSchema, x.BaseTable.TableName });

        foreach (var group in dependents)
        {
            var n = 0;

            foreach(var fkey in group)
            { 
                if( fkey.BaseTable.PrimaryKeyColumns.Any(x => fkey.BaseTable.Columns.Any(y => y.ColumnName == x && y.DataType == "hierarchyid"))){
                     continue;
                }

                if(fkey.DependentRole.Multiplicity == "*"){
                    var variableName = NamingConvention.Pluralize(fkey.BaseTable.ObjectName) + $"{n:#}";
#>

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<<#= fkey.BaseTable.ObjectName #>> <#= variableName  #> { get; set; }

<#                
                }
                else{
#>
        public virtual <#= fkey.BaseTable.ObjectName #> <#= $"{fkey.BaseTable.ObjectName}{n:#}"  #> { get; set; }

<#                
                }
                n++;
            }
        }
        // このテーブルが参照する
        var query = table.ForeignKeys
            .GroupBy(x => new { x.ReferencedTable.TableSchema, x.ReferencedTable.TableName});
        foreach (var group in query)
        {
            var n = 0;
            foreach (var fkey in group)
            { 
                // hierarchyid is not supported on .NET Framework 4.7
                //if( fkey.ReferencedTable.PrimaryKeyColumns.Any(x => fkey.ReferencedTable.Columns.Any(y => y.ColumnName == x && y.DataType == "hierarchyid"))){
                //     continue;
                //}
                var required = fkey.DependentRole.Required;
#>
        public virtual <#= fkey.ReferencedTable.ObjectName #> <#= $"{fkey.ReferencedTable.ObjectName}{n:#}"  #> { get; set; }

<#
                n++;
            }
        }
#>
    }
}
<#      SaveOutput(table.ObjectName + ".generated.cs"); 
    } #>
<#+
private void SaveOutput(string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string outputFilePath = Path.Combine(templateDirectory, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);

  var visualStudio = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
  var project = visualStudio.Solution.FindProjectItem(this.Host.TemplateFile).ContainingProject as EnvDTE.Project;
  project.ProjectItems.AddFromFile(outputFilePath);
}
#>