<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="$(SolutionDir)\Schema\bin\Debug\Schema.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="Schema" #>
<#@ import namespace="Schema.Infrastructure" #>
<#@ output extension=".generated.cs" #>
<#
    var modelNamespace = "AdventureWorksCore.Models";

    var contextName = "AdventureWorksContext";
    var connectionName = "AdventureWorks";
    var connectionString = "data source=localhost\\SQLEXPRESS;initial catalog=AdventureWorks2016;integrated security=True;MultipleActiveResultSets=True;";

    var schemaManager = new SchemaManager(connectionString);
    var tables = schemaManager.GetTables();
    var associations = schemaManager.GetAssociations();

#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;
namespace <#= modelNamespace #>
{
    public class <#= contextName #> : DbContext{
        public <#= contextName #>()
            : base()
        {
            //Database.Log = x => Console.Out.WriteLine(x);
        }
<#  foreach(var table in tables){ 
        // hierarchyid is not supported on .NET Framework 4.7
        if( table.PrimaryKeyColumns.Any(x => table.Columns.Any(y => y.ColumnName == x && y.DataType == "hierarchyid"))){
            continue;
        }
#>
        public DbSet<<#= table.ObjectName #>> <#= NamingConvention.Pluralize(table.ObjectName) #> { get; set; }
<#  } #>
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            base.OnConfiguring(optionsBuilder);
            optionsBuilder
                .UseLazyLoadingProxies()
                .UseSqlServer(@"<#= connectionString #>");
        }
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {

<#  foreach(var table in tables){ 
        // hierarchyid is not supported on .NET Framework 4.7
        if( table.PrimaryKeyColumns.Any(x => table.Columns.Any(y => y.ColumnName == x && y.DataType == "hierarchyid"))){
            continue;
        }

        // primary key #>
<#      if(table.PrimaryKeyColumns.Count() > 1 ){ #>

            modelBuilder.Entity<<#= table.ObjectName #>>()
                .HasKey(e => new { 
<#
                        var position = 0;
                        foreach(var column in table.PrimaryKeyColumns){
                            if(position > 0){
#>, 
<#
                            }
#>
                    e.<#= NamingConvention.Pascalize(column) #><#
                            position++;
                        }
#>});

<#                  
        } else if(table.PrimaryKeyColumns.Count() == 1 ){ #>
            modelBuilder.Entity<<#= table.ObjectName #>>()
                .HasKey(e => e.<#= NamingConvention.Pascalize(table.PrimaryKeyColumns.First()) #>);

<#
        }

        // このテーブルを参照する
        foreach (var association in associations.Where(x => x.PrincipalRole.RoleName == table.TableName).OrderBy(x => x.DependentRole.RoleName))
        {
            var baseTable = tables.FirstOrDefault(x => x.TableName == association.DependentRole.RoleName);
            // base tableの主キーに hierarchyidが含まれている場合は除外する
            if( baseTable.PrimaryKeyColumns.Any(x => baseTable.Columns.Any(y => y.ColumnName == x && y.DataType == "hierarchyid"))){
                    continue;
            }
#>            modelBuilder.Entity<<#= table.ObjectName #>>()
<#
                if(association.DependentRole.Multiplicity == "*"){
                    var variableName = NamingConvention.Pluralize(association.DependentRole.ReferenceName);
#>
                .HasMany(e => e.<#= variableName #>)
                .WithOne(e => e.<#= association.PrincipalRole.ReferenceName #>)<#
                    
                    if(association.DependentRole.Columns.Count > 1 ){ #>

                .HasForeignKey(e => new { 
<#
                        var position = 0;
                        foreach(var column in association.DependentRole.Columns){
                            if(position > 0){
#>,<#
                            }
#>
                    e.<#= NamingConvention.Pascalize(column) #>
<#
                            position++;
                        }
#>                
                 })<#                  
                    } else { #>

                .HasForeignKey(e => e.<#= NamingConvention.Pascalize(association.DependentRole.Columns[0]) #>)<#
                    }
                }
                else{
#>
                .HasOne(e => e.<#= association.DependentRole.ReferenceName #>)
<#
                    if(association.PrincipalRole.Required){ #>
                .WithOne(e => e.<#= association.PrincipalRole.ReferenceName #>)<#
                    } else { #>
                .WithOptional(e => e.<#= association.PrincipalRole.ReferenceName #>)<#
                    } 
                    if(association.DependentRole.Columns.Count > 1 ){ #>

                .HasForeignKey(e => new { 
<#
                        var position = 0;
                        foreach(var column in association.DependentRole.Columns){
                            if(position > 0){
#>,<#
                            }
#>
                    e.<#= NamingConvention.Pascalize(column) #>
<#
                            position++;
                        }
#>                
                 })<#
                     }
                     else{#>

                .HasForeignKey<<#= baseTable.ObjectName #>>(e => e.<#= NamingConvention.Pascalize(association.DependentRole.Columns[0]) #>)<#
                     }
                } 
                if(association.DeleteRule != "NO ACTION"){ #>

                .OnDelete(DeleteBehavior.Cascade)<#
                }
#>;

<#
        }
        foreach(var column in table.Columns){

            if(column.IsString && column.IsFixedLength){
#>
            modelBuilder.Entity<<#= table.ObjectName #>>()
                .Property(e => e.<#= column.ObjectName #>)
                .IsFixedLength();

<#
            }
        }
    } #>
        }
    }
}
<# SaveOutput(contextName + ".cs"); #>
<#+
private void SaveOutput(string outputFileName) {
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string outputFilePath = Path.Combine(templateDirectory, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);

  var visualStudio = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
  var project = visualStudio.Solution.FindProjectItem(this.Host.TemplateFile).ContainingProject as EnvDTE.Project;
  project.ProjectItems.AddFromFile(outputFilePath);
}
#>